name: Deploy to ECS

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  terraform-output:
    name: Get Terraform Outputs
    runs-on: ubuntu-latest

    outputs:
      ECR_REPOSITORY: ${{ steps.set-vars.outputs.ECR_REPOSITORY }}
      TASK_DEF: ${{ steps.set-vars.outputs.TASK_DEF }}
      CONTAINER_NAME: ${{ steps.set-vars.outputs.CONTAINER_NAME }}
      ECS_SERVICE: ${{ steps.set-vars.outputs.ECS_SERVICE }}
      ECS_CLUSTER: ${{ steps.set-vars.outputs.ECS_CLUSTER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Output
        id: set-vars
        run: |
          echo "ECR_REPOSITORY=$(terraform output -raw ecr_repository_name)" >> $GITHUB_OUTPUT
          echo "TASK_DEF=$(terraform output -raw task_definition_name)" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=$(terraform output -raw container_name)" >> $GITHUB_OUTPUT
          echo "ECS_SERVICE=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT

  deploy:
    name: Build, Push and Deploy to ECS
    runs-on: ubuntu-latest
    needs: terraform-output

    environment: production

    env:
      ECR_REPOSITORY: ${{ needs.terraform-output.outputs.ECR_REPOSITORY }}
      TASK_DEF: ${{ needs.terraform-output.outputs.TASK_DEF }}
      CONTAINER_NAME: ${{ needs.terraform-output.outputs.CONTAINER_NAME }}
      ECS_SERVICE: ${{ needs.terraform-output.outputs.ECS_SERVICE }}
      ECS_CLUSTER: ${{ needs.terraform-output.outputs.ECS_CLUSTER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          platforms: linux/amd64
          provenance: false

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEF }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
